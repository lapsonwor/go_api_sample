// Code generated by sqlc. DO NOT EDIT.
// source: card.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createCard = `-- name: CreateCard :one
INSERT INTO public.card (
  name,
  owner_address,
  equipment_id,
  character_id,
  level,
  token_id,
  rarity_id,
  is_ur,
  locked,
  number_of_skills,
  c_e_file_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, name, owner_address, equipment_id, character_id, level, token_id, rarity_id, is_ur, locked, number_of_skills, created_at, updated_at, deleted_at, c_e_file_id
`

type CreateCardParams struct {
	Name           string        `json:"name"`
	OwnerAddress   string        `json:"owner_address"`
	EquipmentID    sql.NullInt32 `json:"equipment_id"`
	CharacterID    sql.NullInt32 `json:"character_id"`
	Level          int32         `json:"level"`
	TokenID        int32         `json:"token_id"`
	RarityID       int32         `json:"rarity_id"`
	IsUr           bool          `json:"is_ur"`
	Locked         bool          `json:"locked"`
	NumberOfSkills int32         `json:"number_of_skills"`
	CEFileID       sql.NullInt32 `json:"c_e_file_id"`
}

func (q *Queries) CreateCard(ctx context.Context, arg CreateCardParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, createCard,
		arg.Name,
		arg.OwnerAddress,
		arg.EquipmentID,
		arg.CharacterID,
		arg.Level,
		arg.TokenID,
		arg.RarityID,
		arg.IsUr,
		arg.Locked,
		arg.NumberOfSkills,
		arg.CEFileID,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerAddress,
		&i.EquipmentID,
		&i.CharacterID,
		&i.Level,
		&i.TokenID,
		&i.RarityID,
		&i.IsUr,
		&i.Locked,
		&i.NumberOfSkills,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CEFileID,
	)
	return i, err
}

const createCardFromWorker = `-- name: CreateCardFromWorker :one
INSERT INTO public.card (
  name,
  owner_address,
  equipment_id,
  character_id,
  level,
  token_id,
  rarity_id,
  is_ur,
  c_e_file_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, name, owner_address, equipment_id, character_id, level, token_id, rarity_id, is_ur, locked, number_of_skills, created_at, updated_at, deleted_at, c_e_file_id
`

type CreateCardFromWorkerParams struct {
	Name         string        `json:"name"`
	OwnerAddress string        `json:"owner_address"`
	EquipmentID  sql.NullInt32 `json:"equipment_id"`
	CharacterID  sql.NullInt32 `json:"character_id"`
	Level        int32         `json:"level"`
	TokenID      int32         `json:"token_id"`
	RarityID     int32         `json:"rarity_id"`
	IsUr         bool          `json:"is_ur"`
	CEFileID     sql.NullInt32 `json:"c_e_file_id"`
}

func (q *Queries) CreateCardFromWorker(ctx context.Context, arg CreateCardFromWorkerParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, createCardFromWorker,
		arg.Name,
		arg.OwnerAddress,
		arg.EquipmentID,
		arg.CharacterID,
		arg.Level,
		arg.TokenID,
		arg.RarityID,
		arg.IsUr,
		arg.CEFileID,
	)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerAddress,
		&i.EquipmentID,
		&i.CharacterID,
		&i.Level,
		&i.TokenID,
		&i.RarityID,
		&i.IsUr,
		&i.Locked,
		&i.NumberOfSkills,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CEFileID,
	)
	return i, err
}

const getCardByTokenID = `-- name: GetCardByTokenID :one
SELECT c.id, c.name, owner_address, c.equipment_id, c.character_id, level, token_id, c.rarity_id, is_ur, locked, number_of_skills, c.created_at, c.updated_at, c.deleted_at, c_e_file_id, r.id, r.name, r.created_at, r.updated_at, r.deleted_at, cef.id, cef.rarity_id, cef.character_id, cef.equipment_id, ipfs_uri, image_uri, cef.created_at, cef.updated_at, cef.deleted_at, r.name as rarity FROM public.card c
LEFT JOIN public.rarity r
ON c.rarity_id = r.id
LEFT JOIN public.c_e_file cef
ON c.c_e_file_id = cef.id
WHERE c.token_id = $1 
LIMIT 1
`

type GetCardByTokenIDRow struct {
	ID             int32          `json:"id"`
	Name           string         `json:"name"`
	OwnerAddress   string         `json:"owner_address"`
	EquipmentID    sql.NullInt32  `json:"equipment_id"`
	CharacterID    sql.NullInt32  `json:"character_id"`
	Level          int32          `json:"level"`
	TokenID        int32          `json:"token_id"`
	RarityID       int32          `json:"rarity_id"`
	IsUr           bool           `json:"is_ur"`
	Locked         bool           `json:"locked"`
	NumberOfSkills int32          `json:"number_of_skills"`
	CreatedAt      time.Time      `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
	DeletedAt      sql.NullTime   `json:"deleted_at"`
	CEFileID       sql.NullInt32  `json:"c_e_file_id"`
	ID_2           int32          `json:"id_2"`
	Name_2         string         `json:"name_2"`
	CreatedAt_2    time.Time      `json:"created_at_2"`
	UpdatedAt_2    sql.NullTime   `json:"updated_at_2"`
	DeletedAt_2    sql.NullTime   `json:"deleted_at_2"`
	ID_3           int32          `json:"id_3"`
	RarityID_2     sql.NullInt32  `json:"rarity_id_2"`
	CharacterID_2  sql.NullInt32  `json:"character_id_2"`
	EquipmentID_2  sql.NullInt32  `json:"equipment_id_2"`
	IpfsUri        string         `json:"ipfs_uri"`
	ImageUri       string         `json:"image_uri"`
	CreatedAt_3    time.Time      `json:"created_at_3"`
	UpdatedAt_3    sql.NullTime   `json:"updated_at_3"`
	DeletedAt_3    sql.NullTime   `json:"deleted_at_3"`
	Rarity         sql.NullString `json:"rarity"`
}

func (q *Queries) GetCardByTokenID(ctx context.Context, tokenID int32) (GetCardByTokenIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCardByTokenID, tokenID)
	var i GetCardByTokenIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerAddress,
		&i.EquipmentID,
		&i.CharacterID,
		&i.Level,
		&i.TokenID,
		&i.RarityID,
		&i.IsUr,
		&i.Locked,
		&i.NumberOfSkills,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CEFileID,
		&i.ID_2,
		&i.Name_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.DeletedAt_2,
		&i.ID_3,
		&i.RarityID_2,
		&i.CharacterID_2,
		&i.EquipmentID_2,
		&i.IpfsUri,
		&i.ImageUri,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
		&i.DeletedAt_3,
		&i.Rarity,
	)
	return i, err
}

const listAllCards = `-- name: ListAllCards :many
SELECT id, name, owner_address, equipment_id, character_id, level, token_id, rarity_id, is_ur, locked, number_of_skills, created_at, updated_at, deleted_at, c_e_file_id FROM public.card
ORDER BY id
`

func (q *Queries) ListAllCards(ctx context.Context) ([]Card, error) {
	rows, err := q.db.QueryContext(ctx, listAllCards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerAddress,
			&i.EquipmentID,
			&i.CharacterID,
			&i.Level,
			&i.TokenID,
			&i.RarityID,
			&i.IsUr,
			&i.Locked,
			&i.NumberOfSkills,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.CEFileID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCardFromWorker = `-- name: UpdateCardFromWorker :one
UPDATE public.card
SET owner_address = $1, updated_at = $2
WHERE token_id = $3
RETURNING id, name, owner_address, equipment_id, character_id, level, token_id, rarity_id, is_ur, locked, number_of_skills, created_at, updated_at, deleted_at, c_e_file_id
`

type UpdateCardFromWorkerParams struct {
	OwnerAddress string       `json:"owner_address"`
	UpdatedAt    sql.NullTime `json:"updated_at"`
	TokenID      int32        `json:"token_id"`
}

func (q *Queries) UpdateCardFromWorker(ctx context.Context, arg UpdateCardFromWorkerParams) (Card, error) {
	row := q.db.QueryRowContext(ctx, updateCardFromWorker, arg.OwnerAddress, arg.UpdatedAt, arg.TokenID)
	var i Card
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerAddress,
		&i.EquipmentID,
		&i.CharacterID,
		&i.Level,
		&i.TokenID,
		&i.RarityID,
		&i.IsUr,
		&i.Locked,
		&i.NumberOfSkills,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.CEFileID,
	)
	return i, err
}
