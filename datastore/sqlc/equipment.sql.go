// Code generated by sqlc. DO NOT EDIT.
// source: equipment.sql

package sqlc

import (
	"context"
)

const getEquipmentByID = `-- name: GetEquipmentByID :one
SELECT id, name, critical_rate, attack_range, description, type_id, created_at, updated_at, deleted_at FROM public.equipment
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEquipmentByID(ctx context.Context, id int32) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, getEquipmentByID, id)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CriticalRate,
		&i.AttackRange,
		&i.Description,
		&i.TypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getEquipmentIDByName = `-- name: GetEquipmentIDByName :one
SELECT id FROM public.equipment
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetEquipmentIDByName(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getEquipmentIDByName, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listAllEquipment = `-- name: ListAllEquipment :many
SELECT id, name, critical_rate, attack_range, description, type_id, created_at, updated_at, deleted_at FROM public.equipment
ORDER BY id
`

func (q *Queries) ListAllEquipment(ctx context.Context) ([]Equipment, error) {
	rows, err := q.db.QueryContext(ctx, listAllEquipment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Equipment
	for rows.Next() {
		var i Equipment
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CriticalRate,
			&i.AttackRange,
			&i.Description,
			&i.TypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
