// Code generated by sqlc. DO NOT EDIT.
// source: character.sql

package sqlc

import (
	"context"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO public.character (
  name,
  attack_range,
  equipment_slot,
  country_id,
  gender_id,
  attribute_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, attack_range, equipment_slot, country_id, gender_id, attribute_id, created_at, updated_at, deleted_at
`

type CreateCharacterParams struct {
	Name          string `json:"name"`
	AttackRange   int32  `json:"attack_range"`
	EquipmentSlot int32  `json:"equipment_slot"`
	CountryID     int32  `json:"country_id"`
	GenderID      int32  `json:"gender_id"`
	AttributeID   int32  `json:"attribute_id"`
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter,
		arg.Name,
		arg.AttackRange,
		arg.EquipmentSlot,
		arg.CountryID,
		arg.GenderID,
		arg.AttributeID,
	)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AttackRange,
		&i.EquipmentSlot,
		&i.CountryID,
		&i.GenderID,
		&i.AttributeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCharacterByID = `-- name: GetCharacterByID :one
SELECT id, name, description, attack_range, equipment_slot, country_id, gender_id, attribute_id, created_at, updated_at, deleted_at FROM public.character
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCharacterByID(ctx context.Context, id int32) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacterByID, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AttackRange,
		&i.EquipmentSlot,
		&i.CountryID,
		&i.GenderID,
		&i.AttributeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCharacterIDByName = `-- name: GetCharacterIDByName :one
SELECT id FROM public.character
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCharacterIDByName(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCharacterIDByName, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listAllCharacter = `-- name: ListAllCharacter :many
SELECT id, name, description, attack_range, equipment_slot, country_id, gender_id, attribute_id, created_at, updated_at, deleted_at FROM public.character
ORDER BY id
`

func (q *Queries) ListAllCharacter(ctx context.Context) ([]Character, error) {
	rows, err := q.db.QueryContext(ctx, listAllCharacter)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AttackRange,
			&i.EquipmentSlot,
			&i.CountryID,
			&i.GenderID,
			&i.AttributeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
