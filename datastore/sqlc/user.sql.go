// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUserSignup = `-- name: CreateUserSignup :one
INSERT INTO public.user (
  wallet_address,
  email,
  name,
  otp_auth_secret
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, wallet_address, email, name, rank, balance, stamina, otp_auth_secret, created_at, updated_at, deleted_at
`

type CreateUserSignupParams struct {
	WalletAddress sql.NullString `json:"wallet_address"`
	Email         string         `json:"email"`
	Name          sql.NullString `json:"name"`
	OtpAuthSecret sql.NullString `json:"otp_auth_secret"`
}

func (q *Queries) CreateUserSignup(ctx context.Context, arg CreateUserSignupParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUserSignup,
		arg.WalletAddress,
		arg.Email,
		arg.Name,
		arg.OtpAuthSecret,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Email,
		&i.Name,
		&i.Rank,
		&i.Balance,
		&i.Stamina,
		&i.OtpAuthSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, wallet_address, email, name, rank, balance, stamina, otp_auth_secret, created_at, updated_at, deleted_at FROM public.user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Email,
		&i.Name,
		&i.Rank,
		&i.Balance,
		&i.Stamina,
		&i.OtpAuthSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByWallet = `-- name: GetUserByWallet :one
SELECT id, wallet_address, email, name, rank, balance, stamina, otp_auth_secret, created_at, updated_at, deleted_at FROM public.user
WHERE wallet_address = $1 LIMIT 1
`

func (q *Queries) GetUserByWallet(ctx context.Context, walletAddress sql.NullString) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByWallet, walletAddress)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Email,
		&i.Name,
		&i.Rank,
		&i.Balance,
		&i.Stamina,
		&i.OtpAuthSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllUser = `-- name: ListAllUser :many
SELECT id, wallet_address, email, name, rank, balance, stamina, otp_auth_secret, created_at, updated_at, deleted_at FROM public.user
ORDER BY id
`

func (q *Queries) ListAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.WalletAddress,
			&i.Email,
			&i.Name,
			&i.Rank,
			&i.Balance,
			&i.Stamina,
			&i.OtpAuthSecret,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
