// Code generated by sqlc. DO NOT EDIT.
// source: miniGame_rank.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createMiniGameRank = `-- name: CreateMiniGameRank :one
INSERT INTO public.miniGame_rank (
  wallet_address,
  mark
) VALUES (
  $1, $2
)
RETURNING id, wallet_address, mark, created_at, updated_at, deleted_at
`

type CreateMiniGameRankParams struct {
	WalletAddress string `json:"wallet_address"`
	Mark          int32  `json:"mark"`
}

func (q *Queries) CreateMiniGameRank(ctx context.Context, arg CreateMiniGameRankParams) (MinigameRank, error) {
	row := q.db.QueryRowContext(ctx, createMiniGameRank, arg.WalletAddress, arg.Mark)
	var i MinigameRank
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Mark,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getMiniGameRank = `-- name: GetMiniGameRank :many
SELECT id, wallet_address, mark, created_at, updated_at, deleted_at FROM public.miniGame_rank
ORDER BY id
`

func (q *Queries) GetMiniGameRank(ctx context.Context) ([]MinigameRank, error) {
	rows, err := q.db.QueryContext(ctx, getMiniGameRank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MinigameRank
	for rows.Next() {
		var i MinigameRank
		if err := rows.Scan(
			&i.ID,
			&i.WalletAddress,
			&i.Mark,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMiniGameRankByWallet = `-- name: GetMiniGameRankByWallet :one
SELECT id, wallet_address, mark, created_at, updated_at, deleted_at FROM public.miniGame_rank
WHERE wallet_address = $1
`

func (q *Queries) GetMiniGameRankByWallet(ctx context.Context, walletAddress string) (MinigameRank, error) {
	row := q.db.QueryRowContext(ctx, getMiniGameRankByWallet, walletAddress)
	var i MinigameRank
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Mark,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getRankByWallet = `-- name: GetRankByWallet :one
SELECT mgr.mark, rank FROM (SELECT wallet_address, mark, RANK () OVER ( 
	ORDER BY mark DESC
) rank FROM public.miniGame_rank) mgr
WHERE wallet_address = $1
`

type GetRankByWalletRow struct {
	Mark int32 `json:"mark"`
	Rank int64 `json:"rank"`
}

func (q *Queries) GetRankByWallet(ctx context.Context, walletAddress string) (GetRankByWalletRow, error) {
	row := q.db.QueryRowContext(ctx, getRankByWallet, walletAddress)
	var i GetRankByWalletRow
	err := row.Scan(&i.Mark, &i.Rank)
	return i, err
}

const getTop10Scores = `-- name: GetTop10Scores :many
SELECT wallet_address, mark FROM public.miniGame_rank
ORDER BY mark DESC LIMIT 10
`

type GetTop10ScoresRow struct {
	WalletAddress string `json:"wallet_address"`
	Mark          int32  `json:"mark"`
}

func (q *Queries) GetTop10Scores(ctx context.Context) ([]GetTop10ScoresRow, error) {
	rows, err := q.db.QueryContext(ctx, getTop10Scores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTop10ScoresRow
	for rows.Next() {
		var i GetTop10ScoresRow
		if err := rows.Scan(&i.WalletAddress, &i.Mark); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMiniGameRank = `-- name: UpdateMiniGameRank :one
UPDATE public.miniGame_rank
SET mark = $1, updated_at = $2
WHERE wallet_address = $3
RETURNING id, wallet_address, mark, created_at, updated_at, deleted_at
`

type UpdateMiniGameRankParams struct {
	Mark          int32        `json:"mark"`
	UpdatedAt     sql.NullTime `json:"updated_at"`
	WalletAddress string       `json:"wallet_address"`
}

func (q *Queries) UpdateMiniGameRank(ctx context.Context, arg UpdateMiniGameRankParams) (MinigameRank, error) {
	row := q.db.QueryRowContext(ctx, updateMiniGameRank, arg.Mark, arg.UpdatedAt, arg.WalletAddress)
	var i MinigameRank
	err := row.Scan(
		&i.ID,
		&i.WalletAddress,
		&i.Mark,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
